Index: questions/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\nfrom accounts.models import User\n\n\ndef get_choices(options):\n    options = [\"---\"] + options\n    return [(str(i), option) for (i, option) in enumerate(options)]\n\n\nDEFAULT_CHOICES = get_choices([\"A\", \"B\", \"C\", \"D\"])\n\n\nclass PaperManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related(\"questions\", \"questions__section\")\n\n\nclass Paper(models.Model):\n    SUBJECTS = [\n        (\"r\", \"Random\"),\n        (\"0\", \"Tieng Anh\"),\n    ]\n\n    PAST_PAPER = \"p\"\n    MOCK_PAPER = \"m\"\n    QUESTION_COLLECTIONS = \"c\"\n    PAPER_TYPES = [\n        (PAST_PAPER, \"Past paper\"),\n        (MOCK_PAPER, \"Mock paper\"),\n        (QUESTION_COLLECTIONS, \"Question collections\"),\n    ]\n\n    code = models.CharField(max_length=5)\n    subject = models.CharField(max_length=1, choices=SUBJECTS)\n    date = models.DateField(verbose_name=\"Paper Date\", auto_now=True)\n    type = models.CharField(max_length=1, choices=PAPER_TYPES)\n\n    objects = PaperManager()\n\n    def __str__(self):\n        subject = self.get_subject_display()\n        type = self.get_type_display()\n        year = self.date.year\n        if self.type == Paper.PAST_PAPER:\n            code = self.code\n            return f\"({type}) {subject} {year} ({code})\"\n        else:\n            return f\"({type}) {subject} {year}\"\n\n\nclass Section(models.Model):\n    name = models.CharField(max_length=100, verbose_name=\"Section name\", unique=True)\n    instruction_text = models.TextField(verbose_name=\"Section instruction\")\n    papers = models.ManyToManyField(Paper, through=\"Question\", related_name=\"sections\")\n\n    def __str__(self):\n        return self.name\n\n\nclass Question1(models.Model):\n    json_data = models.JSONField(verbose_name=\"Question JSON\")\n    correct_answer = models.CharField(max_length=1, choices=DEFAULT_CHOICES)\n\n    paper = models.ForeignKey(Paper, related_name=\"questions\", on_delete=models.CASCADE)\n    section = models.ForeignKey(Section, related_name=\"questions\", on_delete=models.CASCADE)\n    users = models.ManyToManyField(User, through=\"UserQuestion\", related_name=\"questions\")\n\n    def __str__(self):\n        return f\"Question {self.id}\"\n\n\nclass Question(models.Model):\n    text = models.TextField(verbose_name=\"Question\")\n\n    paper = models.ForeignKey(Paper, related_name=\"questions\", on_delete=models.CASCADE)\n    section = models.ForeignKey(Section, related_name=\"questions\", on_delete=models.CASCADE)\n    users = models.ManyToManyField(User, through=\"UserQuestion\", related_name=\"questions\")\n\n\nclass Choice(models.Model):\n    text = models.CharField(verbose_name=\"Answer\")\n    is_correct = models.BooleanField(verbose_name=\"Is correct choice?\")\n\n    question = models.ForeignKey(Question, related_name=\"choices\", on_delete=models.CASCADE)\n\n\nclass UserQuestion(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    timestamp = models.DateTimeField(auto_now=True)\n    last_attempt = models.CharField(max_length=1, choices=DEFAULT_CHOICES)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/questions/models.py b/questions/models.py
--- a/questions/models.py	(revision 4fb0065f4ff9a2cd59605d7e771d978d296ff46f)
+++ b/questions/models.py	(date 1659881158673)
@@ -2,90 +2,97 @@
 from accounts.models import User
 
 
-def get_choices(options):
-    options = ["---"] + options
-    return [(str(i), option) for (i, option) in enumerate(options)]
-
-
-DEFAULT_CHOICES = get_choices(["A", "B", "C", "D"])
-
-
-class PaperManager(models.Manager):
-    def get_queryset(self):
-        return super().get_queryset().prefetch_related("questions", "questions__section")
-
-
-class Paper(models.Model):
-    SUBJECTS = [
-        ("r", "Random"),
-        ("0", "Tieng Anh"),
-    ]
-
-    PAST_PAPER = "p"
-    MOCK_PAPER = "m"
-    QUESTION_COLLECTIONS = "c"
-    PAPER_TYPES = [
-        (PAST_PAPER, "Past paper"),
-        (MOCK_PAPER, "Mock paper"),
-        (QUESTION_COLLECTIONS, "Question collections"),
-    ]
-
-    code = models.CharField(max_length=5)
-    subject = models.CharField(max_length=1, choices=SUBJECTS)
-    date = models.DateField(verbose_name="Paper Date", auto_now=True)
-    type = models.CharField(max_length=1, choices=PAPER_TYPES)
-
-    objects = PaperManager()
-
-    def __str__(self):
-        subject = self.get_subject_display()
-        type = self.get_type_display()
-        year = self.date.year
-        if self.type == Paper.PAST_PAPER:
-            code = self.code
-            return f"({type}) {subject} {year} ({code})"
-        else:
-            return f"({type}) {subject} {year}"
+TOAN = "t"
+TIENG_ANH = "0"
+TIENG_PHAP = "1"
+TIENG_NGA = "2"
+TIENG_TRUNG = "3"
+TIENG_HAN = "4"
+TIENG_NHAT = "5"
+TIENG_DUC = "6"
+VAT_LY = "l"
+HOA_HOC = "h"
+SINH_HOC = "s"
+LICH_SU = "u"
+DIA_LY = "d"
+GIAO_DUC_CONG_DAN = "g"
+SUBJECTS = [
+    (TOAN, "Toán"),
+    (TIENG_ANH, "Tiếng Anh"),
+    (TIENG_PHAP, "Tiếng Pháp"),
+    (TIENG_NGA, "Tiếng Nga"),
+    (TIENG_TRUNG, "Tiếng Trung"),
+    (TIENG_HAN, "Tiếng Hàn"),
+    (TIENG_NHAT, "Tiếng Nhật"),
+    (TIENG_DUC, "Tiếng Đức"),
+    (VAT_LY, "Vật lý"),
+    (HOA_HOC, "Hóa học"),
+    (SINH_HOC, "Sinh học"),
+    (LICH_SU, "Lịch sử"),
+    (DIA_LY, "Địa lý"),
+    (GIAO_DUC_CONG_DAN, "Giáo dục công dân"),
+]
 
 
 class Section(models.Model):
-    name = models.CharField(max_length=100, verbose_name="Section name", unique=True)
-    instruction_text = models.TextField(verbose_name="Section instruction")
-    papers = models.ManyToManyField(Paper, through="Question", related_name="sections")
+    class Meta:
+        ordering = ["index"]
+
+    name = models.CharField(max_length=100)
+    instructions = models.TextField(verbose_name="Section Instructions")
+    index = models.PositiveSmallIntegerField(verbose_name="Section Index")
 
     def __str__(self):
         return self.name
 
 
-class Question1(models.Model):
-    json_data = models.JSONField(verbose_name="Question JSON")
-    correct_answer = models.CharField(max_length=1, choices=DEFAULT_CHOICES)
+class Paper(models.Model):
+    subject = models.CharField(max_length=1, choices=SUBJECTS)
+    instructions = models.TextField(verbose_name="Paper Instructions")
+    sections = models.ManyToManyField(Section, through="Question", related_name="papers")
 
-    paper = models.ForeignKey(Paper, related_name="questions", on_delete=models.CASCADE)
-    section = models.ForeignKey(Section, related_name="questions", on_delete=models.CASCADE)
-    users = models.ManyToManyField(User, through="UserQuestion", related_name="questions")
+
+class PastPaper(Paper):
+    code = models.CharField(max_length=5)
+    date = models.DateField(verbose_name="Exam Date", auto_now=True)
 
     def __str__(self):
-        return f"Question {self.id}"
+        return f"{self.get_subject_display()} {self.code} {self.date.year}"
+
+
+class QuestionType(models.Model):
+    """Type of questions"""
+    name = models.CharField(max_length=50)
+    subject = models.CharField(max_length=1, choices=SUBJECTS)
 
 
 class Question(models.Model):
+    class Meta:
+        ordering = ["index"]
+
     text = models.TextField(verbose_name="Question")
+    index = models.PositiveSmallIntegerField(verbose_name="Question index")
 
     paper = models.ForeignKey(Paper, related_name="questions", on_delete=models.CASCADE)
     section = models.ForeignKey(Section, related_name="questions", on_delete=models.CASCADE)
+    type = models.ForeignKey(QuestionType, related_name="questions", on_delete=models.CASCADE)
     users = models.ManyToManyField(User, through="UserQuestion", related_name="questions")
 
 
 class Choice(models.Model):
-    text = models.CharField(verbose_name="Answer")
+    class Meta:
+        ordering = ["index"]
+
+    text = models.CharField(max_length=50, verbose_name="Answer")
     is_correct = models.BooleanField(verbose_name="Is correct choice?")
+    index = models.PositiveSmallIntegerField(verbose_name="Choice index")
 
     question = models.ForeignKey(Question, related_name="choices", on_delete=models.CASCADE)
 
 
 class UserQuestion(models.Model):
+    timestamp = models.DateTimeField(auto_now=True)
+
     user = models.ForeignKey(User, on_delete=models.CASCADE)
     question = models.ForeignKey(Question, on_delete=models.CASCADE)
-    timestamp = models.DateTimeField(auto_now=True)
-    last_attempt = models.CharField(max_length=1, choices=DEFAULT_CHOICES)
+    last_attempt = models.ForeignKey(Choice, on_delete=models.CASCADE)
